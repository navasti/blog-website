{"version":3,"sources":["webpack:///./src/components/Post.js","webpack:///./src/templates/author-posts.js","webpack:///./src/util/authors.js"],"names":["Post","title","author","slug","date","body","fluid","tags","to","className","style","color","fontWeight","marginBottom","map","tag","key","slugify","padding","fontSize","AuthorPost","data","pageContext","totalCount","allMarkdownRemark","authors","find","x","name","authorName","pageHeader","pageTitle","postAuthor","authorImageFluid","file","childImageSharp","edges","node","id","fields","frontmatter","excerpt","image","authorQuery","module","exports","imageUrl","bio","facebook","instagram","twitter","pinterest","github"],"mappings":"2FAAA,8IAsCeA,IAhCF,SAAC,GAAsD,IAApDC,EAAmD,EAAnDA,MAAOC,EAA4C,EAA5CA,OAAQC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,KAAMC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KACpD,OACI,kBAAC,IAAD,KACI,kBAAC,OAAD,CAAMC,GAAIL,GACN,kBAAC,IAAD,CAAKM,UAAU,iBAAiBH,MAAOA,KAE3C,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,OAAD,CAAME,GAAIL,EAAMO,MAAO,CAACC,MAAO,QAASC,WAAY,SAAUX,IAElE,kBAAC,IAAD,CAAcS,MAAO,CAACG,aAAc,SAChC,0BAAMJ,UAAU,aAAaL,GAAY,6BAD7C,UAEW,0BAAMK,UAAU,aAAaP,IAExC,kBAAC,IAAD,KAAWG,GACX,wBAAII,UAAU,aACTF,EAAKO,KAAI,SAAAC,GAAG,OACT,wBAAIC,IAAKD,GACL,kBAAC,OAAD,CAAMP,GAAE,QAAUS,kBAAQF,IACtB,kBAAC,IAAD,CAAOL,MAAO,CAACQ,QAAS,UAAWN,WAAY,MAAOO,SAAU,QAASR,MAAM,WAC1EI,SAMrB,kBAAC,OAAD,CAAMP,GAAIL,EAAMM,UAAU,uCAA1B,iB,+KCJDW,UAtBI,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YAChBC,EAAeF,EAAKG,kBAApBD,WACFrB,EAASuB,IAAQC,MAAK,SAAAC,GAAC,OAAIA,EAAEC,OAASN,EAAYO,cAClDC,EAAgBP,EAAN,SAAuC,IAAfA,EAAmB,GAAK,KAAhD,OAA0DD,EAAYO,WAEtF,OACI,kBAAC,IAAD,CAAQE,UAAWD,EAAYE,WAAY9B,EAAQ+B,iBAAkBZ,EAAKa,KAAKC,gBAAgB7B,OAC1Fe,EAAKG,kBAAkBY,MAAMtB,KAAI,gBAAGuB,EAAH,EAAGA,KAAH,OAC9B,kBAAC,IAAD,CAAMrB,IAAKqB,EAAKC,GAChBnC,KAAMkC,EAAKE,OAAOpC,KAClBF,MAAOoC,EAAKG,YAAYvC,MACxBC,OAAQmC,EAAKG,YAAYtC,OACzBE,KAAMiC,EAAKG,YAAYpC,KACvBC,KAAMgC,EAAKI,QACXlC,KAAM8B,EAAKG,YAAYjC,KACvBD,MAAO+B,EAAKG,YAAYE,MAAMP,gBAAgB7B,aASvD,IAAMqC,EAAW,c,mBCPxBC,EAAOC,QAvBS,CACZ,CACIjB,KAAM,WACNkB,SAAU,WACVC,IAAK,0FACLC,SAAU,4BACVC,UAAW,6BACXC,QAAS,2BACTC,UAAW,6BACXC,OAAQ,2BAEZ,CACIxB,KAAM,WACNkB,SAAU,WACVC,IAAK,wGACLC,SAAU,4BACVC,UAAW,6BACXC,QAAS,2BACTC,UAAW,6BACXC,OAAQ","file":"component---src-templates-author-posts-js-01fa63940a058b713345.js","sourcesContent":["import React from 'react'\nimport { Link } from 'gatsby'\nimport Img from 'gatsby-image'\nimport { Badge, Card, CardTitle, CardText, CardSubtitle, CardBody } from 'reactstrap'\nimport { slugify } from '../util/utilityFunctions'\n\nconst Post = ({ title, author, slug, date, body, fluid, tags }) => {\n    return (\n        <Card>\n            <Link to={slug}>\n                <Img className=\"card-image-top\" fluid={fluid}/>\n            </Link>\n            <CardBody>\n                <CardTitle>\n                    <Link to={slug} style={{color: 'black', fontWeight: 'bold'}}>{title}</Link>\n                </CardTitle>\n                <CardSubtitle style={{marginBottom: '10px'}}>\n                    <span className=\"text-info\">{date}</span><br />\n                    Author <span className=\"text-info\">{author}</span>\n                </CardSubtitle>\n                <CardText>{body}</CardText>\n                <ul className=\"post-tags\">\n                    {tags.map(tag => (\n                        <li key={tag}>\n                            <Link to={`/tag/${slugify(tag)}`}>\n                                <Badge style={{padding: '5px 8px', fontWeight: '200', fontSize: '13px'}} color=\"primary\">\n                                    {tag}\n                                </Badge>\n                            </Link>\n                        </li>\n                    ))}\n                </ul>\n                <Link to={slug} className=\"btn btn-outline-primary float-right\">Read more</Link>\n            </CardBody>\n        </Card>\n    )\n}\n\nexport default Post\n","import React from 'react'\nimport Layout from '../components/layout'\nimport Post from '../components/Post'\nimport { graphql } from 'gatsby'\nimport authors from '../util/authors'\n\nconst AuthorPost = ({ data, pageContext }) => {\n    const { totalCount } = data.allMarkdownRemark;\n    const author = authors.find(x => x.name === pageContext.authorName);\n    const pageHeader = `${totalCount} post${totalCount === 1 ? '' : 's'} by ${pageContext.authorName}`\n\n    return (\n        <Layout pageTitle={pageHeader} postAuthor={author} authorImageFluid={data.file.childImageSharp.fluid}>\n            {data.allMarkdownRemark.edges.map(({ node })=>(\n                <Post key={node.id}\n                slug={node.fields.slug}\n                title={node.frontmatter.title}\n                author={node.frontmatter.author}\n                date={node.frontmatter.date}\n                body={node.excerpt}\n                tags={node.frontmatter.tags}\n                fluid={node.frontmatter.image.childImageSharp.fluid} \n                />\n            ))}\n        </Layout>\n    )\n}\n\nexport default AuthorPost\n\nexport const authorQuery = graphql`\n    query authorQuery($authorName: String!, $imageUrl: String!){\n        allMarkdownRemark(\n            sort: { fields: [frontmatter___date], order: DESC }\n            filter: { frontmatter: { author: { eq: $authorName } }}\n        ){\n            totalCount\n            edges{\n                node{\n                    id\n                    frontmatter{\n                        title\n                        date(formatString: \"MMM Do YYYY\")\n                        author\n                        tags\n                        image{\n                            childImageSharp{\n                                fluid(maxWidth: 650){\n                                    ...GatsbyImageSharpFluid\n                                }\n                            }\n                        }\n                    }\n                    fields{\n                        slug\n                    }\n                    excerpt\n                }\n            }\n        }\n        file(relativePath: { eq: $imageUrl }){\n            childImageSharp{\n                fluid(maxWidth: 300){\n                    ...GatsbyImageSharpFluid\n                }\n            }\n        }\n    }\n`","const authors = [\n    {\n        name: \"John Doe\",\n        imageUrl: \"john.jpg\",\n        bio: \"John has been in a front-end an UI designer for over 10 years, he is a brilliant artist\",\n        facebook: \"https://www.facebook.com/\",\n        instagram: \"https://www.instagram.com/\",\n        twitter: \"https://www.twitter.com/\",\n        pinterest: \"https://www.pinterest.com/\",\n        github: \"https://www.github.com/\",\n    },\n    {\n        name: \"Jane Doe\",\n        imageUrl: \"jane.jpg\",\n        bio: \"Jane is a back-end developer, she specializes is seciourity and her favourite stack is the MERN stack\",\n        facebook: \"https://www.facebook.com/\",\n        instagram: \"https://www.instagram.com/\",\n        twitter: \"https://www.twitter.com/\",\n        pinterest: \"https://www.pinterest.com/\",\n        github: \"https://www.github.com/\",\n    }\n]\n\nmodule.exports = authors;"],"sourceRoot":""}